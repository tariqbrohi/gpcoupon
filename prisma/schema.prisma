datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Category {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  name                    String            @unique
  slug                    String            @unique
  brandIDs                String[]          @db.ObjectId
  brands                  Brand[]           @relation(fields: [brandIDs], references: [id])
  itemIds                 String[]          @db.ObjectId
  items                   Item[]            @relation(fields: [itemIds], references: [id])
  metadata                Json?
  imageUrls               Image
  createdAt               Int
  updatedAt               Int
  deletedAt               Int?
}

model Brand {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  sub                     String?           
  name                    String      
  slug                    String            @unique
  description             String
  disclaimer              String
  backgroundUrl           String
  thumbnailUrl            String
  status                  Status
  terms                   String
  createdAt               Int
  updatedAt               Int
  deletedAt               Int?
  categoryIDs             String[]          @db.ObjectId
  categories              Category[]        @relation(fields: [categoryIDs], references: [id])
  items                   Item[]   
  sortOrder               Int               @default(0)         
  countries               Country[]
  metadata                Json?

  @@index([name])
  @@index([status])
  @@index([countries])
}

model GPoint {
  id                              String            @id @default(auto()) @map("_id") @db.ObjectId
  name                            String
  slug                            String            @unique  
  imageUrl                    String
  amount        Float
  createdAt                       Int
  updatedAt                       Int
}

model GPointGift {
  id                              String            @id @default(auto()) @map("_id") @db.ObjectId
  code  String
  pin   String
  amount  Float
  status String
  orderId String @db.ObjectId
  order GPointOrder     @relation(references: [id], fields: [orderId])
  createdAt                       Int
  updatedAt                       Int

  @@unique([code, pin])
}

model GPointOrder {
  id                              String            @id @default(auto()) @map("_id") @db.ObjectId
  gpointId  String
  gpoint  Json
  sender  Json
  exchangeRate  Float
  totalPrice  Float
  status String
  code  Int
  qty Int
  recipient Recipient
  createdAt                       Int
  updatedAt                       Int
  gifts GPointGift[]

  @@index([status])
}

model Item {
  id                              String            @id @default(auto()) @map("_id") @db.ObjectId
  affiliate                       Boolean?
  name                            String
  slug                            String            @unique  
  extendedName                    String?
  status                          Status
  imageUrls                       Image
  couponImageUrl                  String?
  expiresIn                       Int?
  discountRate                    Float?
  customerDiscountRate            Float?
  influencerDiscountRate          Float?
  influencerId                    String?
  originalPrice                   Float
  amount                          Float
  price                           Price
  createdAt                       Int
  updatedAt                       Int
  deletedAt                       Int?
  brandId                         String?           @db.ObjectId
  brand                           Brand?            @relation(fields: [brandId], references: [id])
  country                         Country
  type                            ItemType
  redemptionInstructions          String
  termsAndConditionsInstructions  String
  categoryIDs                     String[]          @db.ObjectId
  categories                      Category[]        @relation(fields: [categoryIDs], references: [id])
  metadata                        Json?
  sortOrder                       Int               @default(0)

  @@index([name])
  @@index([amount])
  @@index([discountRate])
  @@index([country])
  @@index([status])
  @@index([influencerId])
}

model Order {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  status                  OrderStatus
  senderId                String            
  recipient               Recipient
  message                 String?
  itemId                  String            
  item                    Json       
  payment                 Payment
  gifts                   Gift[]                  
  metadata                Json?
  createdAt               Int
  updatedAt               Int
  deletedAt               Int?

  @@index([senderId])
}

model Gift {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  code                    String
  pin                     String
  amount                  Float?
  orderId                 String            @db.ObjectId
  order                   Order             @relation(fields: [orderId], references: [id])
  status                  GiftStatus
  createdAt               Int
  updatedAt               Int
  deletedAt               Int?

  @@unique([code, pin])
}

model Stripe {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  stripeId                String            @unique
  userId                  String            @unique 
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @default(now())
}

type Image {
  small                   String
  medium                  String
  large                   String
}

type Price {
  amount                  Float
  currency                String
}

type Recipient {
  email                   String
  name                    String
}

type Payment {
  exchange                Exchange
  price                   Price
  discountRate            Float
  paymentVendor           PaymentVendor
  totalAmount             Float
}

type Exchange {
  exchangeRate            Float
  source                  String
  target                  String
}

enum PaymentVendor {
  GPOINT
  STRIPE
}

enum GiftStatus {
  expired
  used
  available
}

enum Status {
  AVAILABLE
  UNAVAILABLE
}

enum ItemType {
  GIFT_CARD
  GIFT_ICON
}

enum Role {
  root
}

enum OrderStatus {
  complete
  approved
  denied
  processing
}

enum Country {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}
